{"name":"coin-rb","tagline":"","body":"## What is coin?\r\n\r\n> G: Let's watch a movie!  \r\n> B: Sure! What movie would you like to see?  \r\n> G: Dunno! Let's find something from IMDB.  \r\n> B: OK!  \r\n> *B and G open IMDB.com*  \r\n> G: This one looks fun! But I don't feel like watching sci-fi tonight. Let's put it on our Watch Later list.  \r\n> B: I found a good one! But it's a bit too long. I'll add it to the Watch Later list.  \r\n> *2 hours later with 20 movies in the Watch Later list*  \r\n> B: I give up!  \r\n> G: Picking the perfect movie is really hard!  \r\n> B *and* G *at the same time*: If only there was a simple, easy to use command line program that would pick out a semi-random movie from our Watch Later list!  \r\n\r\nIf that exchange sounded familiar, you are in the right place!\r\nCoin is a command-line utility that chooses a semi-random movie from a previously compiled list.\r\nMovies can be added by title, IMDB address or themoviedb.org URL.\r\nThis product uses the TMDb API but is not endorsed or certified by TMDb.\r\n\r\n### How does it work?\r\nCoin puts all unwatched movies from your list into a general pool and draws a semi-random choice from there.\r\nNot all movies have the same likelihood of being selected.\r\nThe probability of a movie being drawn from the pool is proportional to the movie's rating.\r\nA movie with a rating of 10.0 is about twice as likely to be chosen as one with a rating of 5.0.\r\n\r\n### Why semi-random and not plain old random?\r\nIt seemed like a semi-sensible design choice.\r\n\r\n## Requirements and installation\r\n\r\nCoin uses `json`, `themoviedb`, `colorize` and `trollop` gems.\r\nYou can install them with\r\n\r\n    gem install json themoviedb colorize trollop\r\n\r\nOr if you have Bundler installed\r\n    \r\n    bundle\r\n\r\nThere is no special installation procedure for coin.\r\nIf you want to make your life easier, copy `coin.rb` to a folder that is in your `$PATH` and rename it to `coin`.\r\nCoin will create a database file called `.coindb.json` in your home directory.\r\n\r\n## Usage\r\n    \tcoin [action] <argument(s)>\r\n    \r\n\tActions:\r\n    \tadd, a         Add a new movie to the database. \r\n\t\t\t\t\t   Arguments can be movie titles, IMDB addresses \r\n\t\t\t\t\t   (www.imdb.com/title/<IDMB ID>) or TMDb addresses\r\n\t\t\t\t\t   (www.themoviedb.org/movie/<TMDb ID>). If the title \r\n\t\t\t\t\t   contains spaces, enclose it in double quotes\r\n\t\t\t\t\t   (e.g. coin add \"Kung Fu Panda\")\r\n    \tdelete, d      Delete a movie from the database. Arguments are\r\n\t\t\t\t\t   movie IDs (TMDb IDs) that are displayed by the \"list\" command\r\n    \tflip, f        Get a semi-random movie from the database\r\n    \tlist, l        List all movies in the database\r\n    \timport, i      Import movies from a file that contains one movie\r\n\t\t\t\t\t   title/IMDB URL/TMDb URL per line. Arguments are paths to text files\r\n\t\turl, u         Add a URL to a movie in the database. When the movie is selected,\r\n\t\t\t\t\t   the URL is opened with the command 'open <URL>'.\r\n\t\t\t\t\t   Arguments are the ID of the movie and the URL/filename\r\n        unwatch, un    Mark a movie as not watched. Argument is movie ID (TMDb ID) that \r\n                       are displayed by the \"list\" command\r\n\r\n\r\n\r\n## Bugs, problems, questions\r\n\r\nFeel free to use the GitHub Issue tracker for for filing bug reports. Also for questions, problems, feature requests, Christmas wishlists etc.\r\n","google":"UA-2630842-8","note":"Don't delete this file! It's used internally to help with page regeneration."}